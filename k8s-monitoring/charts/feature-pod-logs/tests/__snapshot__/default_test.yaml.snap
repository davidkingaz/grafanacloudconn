should allow overriding the default labelsToKeep:
  1: |
    "declare \"pod_logs\" {\n  argument \"logs_destinations\" {\n    comment = \"Must be a list of log destinations where collected logs should be forwarded to\"\n  }\n  \n  discovery.relabel \"filtered_pods\" {\n    targets = discovery.kubernetes.pods.targets\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\"]\n      action = \"replace\"\n      target_label = \"namespace\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_name\"]\n      action = \"replace\"\n      target_label = \"pod\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_container_name\"]\n      action = \"replace\"\n      target_label = \"container\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"$1\"\n      target_label = \"job\"\n    }\n  \n    // set the container runtime as a label\n    rule {\n      action = \"replace\"\n      source_labels = [\"__meta_kubernetes_pod_container_id\"]\n      regex = \"^(\\\\S+):\\\\/\\\\/.+$\"\n      replacement = \"$1\"\n      target_label = \"tmp_container_runtime\"\n    }\n  \n    // make all labels on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_label_(.+)\"\n    }\n  \n    // make all annotations on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_(.+)\"\n    }\n  \n    // explicitly set service_name. if not set, loki will automatically try to populate a default.\n    // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users\n    //\n    // choose the first value found from the following ordered list:\n    // - pod.annotation[resource.opentelemetry.io/service.name]\n    // - pod.label[app.kubernetes.io/name]\n    // - k8s.pod.name\n    // - k8s.container.name\n    rule {\n      action = \"replace\"\n      source_labels = [\n        \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name\",\n        \"__meta_kubernetes_pod_label_app_kubernetes_io_name\",\n        \"__meta_kubernetes_pod_name\",\n        \"__meta_kubernetes_pod_container_name\",\n      ]\n      separator = \";\"\n      regex = \"^(?:;*)?([^;]+).*$\"\n      replacement = \"$1\"\n      target_label = \"service_name\"\n    }\n  \n    // set resource attributes\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job\"]\n      regex = \"(.+)\"\n      target_label = \"job\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_name\"]\n      regex = \"(.+)\"\n      target_label = \"app_kubernetes_io_name\"\n    }\n  }\n  \n  discovery.kubernetes \"pods\" {\n    role = \"pod\"\n    selectors {\n      role = \"pod\"\n      field = \"spec.nodeName=\" + sys.env(\"HOSTNAME\")\n    }\n  }\n  \n  discovery.relabel \"filtered_pods_with_paths\" {\n    targets = discovery.relabel.filtered_pods.output\n  \n    rule {\n      source_labels = [\"__meta_kubernetes_pod_uid\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"/var/log/pods/*$1/*.log\"\n      target_label = \"__path__\"\n    }\n  }\n  \n  local.file_match \"pod_logs\" {\n    path_targets = discovery.relabel.filtered_pods_with_paths.output\n  }\n  \n  loki.source.file \"pod_logs\" {\n    targets    = local.file_match.pod_logs.targets\n    forward_to = [loki.process.pod_logs.receiver]\n  }\n  \n  loki.process \"pod_logs\" {\n    stage.match {\n      selector = \"{tmp_container_runtime=~\\\"containerd|cri-o\\\"}\"\n      // the cri processing stage extracts the following k/v pairs: log, stream, time, flags\n      stage.cri {}\n  \n      // Set the extract flags and stream values as labels\n      stage.labels {\n        values = {\n          flags  = \"\",\n          stream  = \"\",\n        }\n      }\n    }\n  \n    stage.match {\n      selector = \"{tmp_container_runtime=\\\"docker\\\"}\"\n      // the docker processing stage extracts the following k/v pairs: log, stream, time\n      stage.docker {}\n  \n      // Set the extract stream value as a label\n      stage.labels {\n        values = {\n          stream  = \"\",\n        }\n      }\n    }\n  \n    // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,\n    // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary\n    // container runtime label as it is no longer needed.\n    stage.label_drop {\n      values = [\n        \"filename\",\n        \"tmp_container_runtime\",\n      ]\n    }\n  \n    // Only keep the labels that are defined in the `keepLabels` list.\n    stage.label_keep {\n      values = [\"k8s_container_name\",\"k8s_namespace\",\"k8s_pod_name\",\"k8s_pod_label_app_kubernetes_io_name\",\"integration\"]\n    }\n  \n    forward_to = argument.logs_destinations.value\n  }\n}"
should allow setting static labels:
  1: |
    "declare \"pod_logs\" {\n  argument \"logs_destinations\" {\n    comment = \"Must be a list of log destinations where collected logs should be forwarded to\"\n  }\n  \n  discovery.relabel \"filtered_pods\" {\n    targets = discovery.kubernetes.pods.targets\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\"]\n      action = \"replace\"\n      target_label = \"namespace\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_name\"]\n      action = \"replace\"\n      target_label = \"pod\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_container_name\"]\n      action = \"replace\"\n      target_label = \"container\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"$1\"\n      target_label = \"job\"\n    }\n  \n    // set the container runtime as a label\n    rule {\n      action = \"replace\"\n      source_labels = [\"__meta_kubernetes_pod_container_id\"]\n      regex = \"^(\\\\S+):\\\\/\\\\/.+$\"\n      replacement = \"$1\"\n      target_label = \"tmp_container_runtime\"\n    }\n  \n    // make all labels on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_label_(.+)\"\n    }\n  \n    // make all annotations on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_(.+)\"\n    }\n  \n    // explicitly set service_name. if not set, loki will automatically try to populate a default.\n    // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users\n    //\n    // choose the first value found from the following ordered list:\n    // - pod.annotation[resource.opentelemetry.io/service.name]\n    // - pod.label[app.kubernetes.io/name]\n    // - k8s.pod.name\n    // - k8s.container.name\n    rule {\n      action = \"replace\"\n      source_labels = [\n        \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name\",\n        \"__meta_kubernetes_pod_label_app_kubernetes_io_name\",\n        \"__meta_kubernetes_pod_name\",\n        \"__meta_kubernetes_pod_container_name\",\n      ]\n      separator = \";\"\n      regex = \"^(?:;*)?([^;]+).*$\"\n      replacement = \"$1\"\n      target_label = \"service_name\"\n    }\n  \n    // set resource attributes\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job\"]\n      regex = \"(.+)\"\n      target_label = \"job\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_name\"]\n      regex = \"(.+)\"\n      target_label = \"app_kubernetes_io_name\"\n    }\n  }\n  \n  discovery.kubernetes \"pods\" {\n    role = \"pod\"\n    selectors {\n      role = \"pod\"\n      field = \"spec.nodeName=\" + sys.env(\"HOSTNAME\")\n    }\n  }\n  \n  discovery.relabel \"filtered_pods_with_paths\" {\n    targets = discovery.relabel.filtered_pods.output\n  \n    rule {\n      source_labels = [\"__meta_kubernetes_pod_uid\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"/var/log/pods/*$1/*.log\"\n      target_label = \"__path__\"\n    }\n  }\n  \n  local.file_match \"pod_logs\" {\n    path_targets = discovery.relabel.filtered_pods_with_paths.output\n  }\n  \n  loki.source.file \"pod_logs\" {\n    targets    = local.file_match.pod_logs.targets\n    forward_to = [loki.process.pod_logs.receiver]\n  }\n  \n  loki.process \"pod_logs\" {\n    stage.match {\n      selector = \"{tmp_container_runtime=~\\\"containerd|cri-o\\\"}\"\n      // the cri processing stage extracts the following k/v pairs: log, stream, time, flags\n      stage.cri {}\n  \n      // Set the extract flags and stream values as labels\n      stage.labels {\n        values = {\n          flags  = \"\",\n          stream  = \"\",\n        }\n      }\n    }\n  \n    stage.match {\n      selector = \"{tmp_container_runtime=\\\"docker\\\"}\"\n      // the docker processing stage extracts the following k/v pairs: log, stream, time\n      stage.docker {}\n  \n      // Set the extract stream value as a label\n      stage.labels {\n        values = {\n          stream  = \"\",\n        }\n      }\n    }\n  \n    // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,\n    // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary\n    // container runtime label as it is no longer needed.\n    stage.label_drop {\n      values = [\n        \"filename\",\n        \"tmp_container_runtime\",\n      ]\n    }\n  \n    stage.static_labels {\n      values = {\n        region = \"central\",\n        color = sys.env(\"COLOR\"),\n      }\n    }\n  \n    // Only keep the labels that are defined in the `keepLabels` list.\n    stage.label_keep {\n      values = [\"app_kubernetes_io_name\",\"container\",\"instance\",\"job\",\"level\",\"namespace\",\"pod\",\"service_name\",\"service_namespace\",\"deployment_environment\",\"deployment_environment_name\",\"integration\"]\n    }\n  \n    forward_to = argument.logs_destinations.value\n  }\n}"
should allow setting structured metadata:
  1: |
    "declare \"pod_logs\" {\n  argument \"logs_destinations\" {\n    comment = \"Must be a list of log destinations where collected logs should be forwarded to\"\n  }\n  \n  discovery.relabel \"filtered_pods\" {\n    targets = discovery.kubernetes.pods.targets\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\"]\n      action = \"replace\"\n      target_label = \"namespace\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_name\"]\n      action = \"replace\"\n      target_label = \"pod\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_container_name\"]\n      action = \"replace\"\n      target_label = \"container\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"$1\"\n      target_label = \"job\"\n    }\n  \n    // set the container runtime as a label\n    rule {\n      action = \"replace\"\n      source_labels = [\"__meta_kubernetes_pod_container_id\"]\n      regex = \"^(\\\\S+):\\\\/\\\\/.+$\"\n      replacement = \"$1\"\n      target_label = \"tmp_container_runtime\"\n    }\n  \n    // make all labels on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_label_(.+)\"\n    }\n  \n    // make all annotations on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_(.+)\"\n    }\n  \n    // explicitly set service_name. if not set, loki will automatically try to populate a default.\n    // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users\n    //\n    // choose the first value found from the following ordered list:\n    // - pod.annotation[resource.opentelemetry.io/service.name]\n    // - pod.label[app.kubernetes.io/name]\n    // - k8s.pod.name\n    // - k8s.container.name\n    rule {\n      action = \"replace\"\n      source_labels = [\n        \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name\",\n        \"__meta_kubernetes_pod_label_app_kubernetes_io_name\",\n        \"__meta_kubernetes_pod_name\",\n        \"__meta_kubernetes_pod_container_name\",\n      ]\n      separator = \";\"\n      regex = \"^(?:;*)?([^;]+).*$\"\n      replacement = \"$1\"\n      target_label = \"service_name\"\n    }\n  \n    // set resource attributes\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job\"]\n      regex = \"(.+)\"\n      target_label = \"job\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_name\"]\n      regex = \"(.+)\"\n      target_label = \"app_kubernetes_io_name\"\n    }\n  }\n  \n  discovery.kubernetes \"pods\" {\n    role = \"pod\"\n    selectors {\n      role = \"pod\"\n      field = \"spec.nodeName=\" + sys.env(\"HOSTNAME\")\n    }\n  }\n  \n  discovery.relabel \"filtered_pods_with_paths\" {\n    targets = discovery.relabel.filtered_pods.output\n  \n    rule {\n      source_labels = [\"__meta_kubernetes_pod_uid\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"/var/log/pods/*$1/*.log\"\n      target_label = \"__path__\"\n    }\n  }\n  \n  local.file_match \"pod_logs\" {\n    path_targets = discovery.relabel.filtered_pods_with_paths.output\n  }\n  \n  loki.source.file \"pod_logs\" {\n    targets    = local.file_match.pod_logs.targets\n    forward_to = [loki.process.pod_logs.receiver]\n  }\n  \n  loki.process \"pod_logs\" {\n    stage.match {\n      selector = \"{tmp_container_runtime=~\\\"containerd|cri-o\\\"}\"\n      // the cri processing stage extracts the following k/v pairs: log, stream, time, flags\n      stage.cri {}\n  \n      // Set the extract flags and stream values as labels\n      stage.labels {\n        values = {\n          flags  = \"\",\n          stream  = \"\",\n        }\n      }\n    }\n  \n    stage.match {\n      selector = \"{tmp_container_runtime=\\\"docker\\\"}\"\n      // the docker processing stage extracts the following k/v pairs: log, stream, time\n      stage.docker {}\n  \n      // Set the extract stream value as a label\n      stage.labels {\n        values = {\n          stream  = \"\",\n        }\n      }\n    }\n  \n    // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,\n    // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary\n    // container runtime label as it is no longer needed.\n    stage.label_drop {\n      values = [\n        \"filename\",\n        \"tmp_container_runtime\",\n      ]\n    }\n    // set the structured metadata values\n    stage.structured_metadata {\n      values = {\n        \"caller\" = \"caller\",\n        \"component\" = \"component\",\n      }\n    }\n  \n    // Only keep the labels that are defined in the `keepLabels` list.\n    stage.label_keep {\n      values = [\"app_kubernetes_io_name\",\"container\",\"instance\",\"job\",\"level\",\"namespace\",\"pod\",\"service_name\",\"service_namespace\",\"deployment_environment\",\"deployment_environment_name\",\"integration\"]\n    }\n  \n    forward_to = argument.logs_destinations.value\n  }\n}"
should render the default configuration:
  1: |
    "declare \"pod_logs\" {\n  argument \"logs_destinations\" {\n    comment = \"Must be a list of log destinations where collected logs should be forwarded to\"\n  }\n  \n  discovery.relabel \"filtered_pods\" {\n    targets = discovery.kubernetes.pods.targets\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\"]\n      action = \"replace\"\n      target_label = \"namespace\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_name\"]\n      action = \"replace\"\n      target_label = \"pod\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_container_name\"]\n      action = \"replace\"\n      target_label = \"container\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_namespace\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"$1\"\n      target_label = \"job\"\n    }\n  \n    // set the container runtime as a label\n    rule {\n      action = \"replace\"\n      source_labels = [\"__meta_kubernetes_pod_container_id\"]\n      regex = \"^(\\\\S+):\\\\/\\\\/.+$\"\n      replacement = \"$1\"\n      target_label = \"tmp_container_runtime\"\n    }\n  \n    // make all labels on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_label_(.+)\"\n    }\n  \n    // make all annotations on the pod available to the pipeline as labels,\n    // they are omitted before write to loki via stage.label_keep unless explicitly set\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_(.+)\"\n    }\n  \n    // explicitly set service_name. if not set, loki will automatically try to populate a default.\n    // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users\n    //\n    // choose the first value found from the following ordered list:\n    // - pod.annotation[resource.opentelemetry.io/service.name]\n    // - pod.label[app.kubernetes.io/name]\n    // - k8s.pod.name\n    // - k8s.container.name\n    rule {\n      action = \"replace\"\n      source_labels = [\n        \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name\",\n        \"__meta_kubernetes_pod_label_app_kubernetes_io_name\",\n        \"__meta_kubernetes_pod_name\",\n        \"__meta_kubernetes_pod_container_name\",\n      ]\n      separator = \";\"\n      regex = \"^(?:;*)?([^;]+).*$\"\n      replacement = \"$1\"\n      target_label = \"service_name\"\n    }\n  \n    // set resource attributes\n    rule {\n      action = \"labelmap\"\n      regex = \"__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job\"]\n      regex = \"(.+)\"\n      target_label = \"job\"\n    }\n    rule {\n      source_labels = [\"__meta_kubernetes_pod_label_app_kubernetes_io_name\"]\n      regex = \"(.+)\"\n      target_label = \"app_kubernetes_io_name\"\n    }\n  }\n  \n  discovery.kubernetes \"pods\" {\n    role = \"pod\"\n    selectors {\n      role = \"pod\"\n      field = \"spec.nodeName=\" + sys.env(\"HOSTNAME\")\n    }\n  }\n  \n  discovery.relabel \"filtered_pods_with_paths\" {\n    targets = discovery.relabel.filtered_pods.output\n  \n    rule {\n      source_labels = [\"__meta_kubernetes_pod_uid\", \"__meta_kubernetes_pod_container_name\"]\n      separator = \"/\"\n      action = \"replace\"\n      replacement = \"/var/log/pods/*$1/*.log\"\n      target_label = \"__path__\"\n    }\n  }\n  \n  local.file_match \"pod_logs\" {\n    path_targets = discovery.relabel.filtered_pods_with_paths.output\n  }\n  \n  loki.source.file \"pod_logs\" {\n    targets    = local.file_match.pod_logs.targets\n    forward_to = [loki.process.pod_logs.receiver]\n  }\n  \n  loki.process \"pod_logs\" {\n    stage.match {\n      selector = \"{tmp_container_runtime=~\\\"containerd|cri-o\\\"}\"\n      // the cri processing stage extracts the following k/v pairs: log, stream, time, flags\n      stage.cri {}\n  \n      // Set the extract flags and stream values as labels\n      stage.labels {\n        values = {\n          flags  = \"\",\n          stream  = \"\",\n        }\n      }\n    }\n  \n    stage.match {\n      selector = \"{tmp_container_runtime=\\\"docker\\\"}\"\n      // the docker processing stage extracts the following k/v pairs: log, stream, time\n      stage.docker {}\n  \n      // Set the extract stream value as a label\n      stage.labels {\n        values = {\n          stream  = \"\",\n        }\n      }\n    }\n  \n    // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,\n    // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary\n    // container runtime label as it is no longer needed.\n    stage.label_drop {\n      values = [\n        \"filename\",\n        \"tmp_container_runtime\",\n      ]\n    }\n  \n    // Only keep the labels that are defined in the `keepLabels` list.\n    stage.label_keep {\n      values = [\"app_kubernetes_io_name\",\"container\",\"instance\",\"job\",\"level\",\"namespace\",\"pod\",\"service_name\",\"service_namespace\",\"deployment_environment\",\"deployment_environment_name\",\"integration\"]\n    }\n  \n    forward_to = argument.logs_destinations.value\n  }\n}"
